{
	"info": {
		"_postman_id": "8f9d4e2b-7c3a-4d1f-9b8e-5a2c7d8e9f0a",
		"name": "KNUST Student System - Dashboard Analytics API",
		"description": "Complete Postman collection for the new dashboard analytics endpoints.\n\n## Authentication\nAll endpoints require admin authentication. Get your token from:\n1. POST /auth/login-otp\n2. POST /auth/verify-login-otp\n3. Copy the access_token and use as Bearer token\n\n## Base URL\nUpdate the {{base_url}} variable to match your server (default: http://localhost:8000)\n\n## New Analytics Endpoints\n- Comprehensive dashboard stats\n- Registration trends analysis\n- College distribution charts\n- Department enrollment metrics\n- System health monitoring\n- Admin user management",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "📊 Dashboard Analytics",
			"item": [
				{
					"name": "Get Comprehensive Dashboard Stats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has all required stats\", function () {",
									"    const responseJson = pm.response.json();",
									"    const data = responseJson.data[0];",
									"    ",
									"    pm.expect(data).to.have.property('total_students');",
									"    pm.expect(data).to.have.property('total_colleges');",
									"    pm.expect(data).to.have.property('total_departments');",
									"    pm.expect(data).to.have.property('total_admins');",
									"    pm.expect(data).to.have.property('total_recognitions');",
									"    pm.expect(data).to.have.property('recent_recognitions');",
									"});",
									"",
									"// Store stats for other requests",
									"const responseJson = pm.response.json();",
									"if (responseJson.data && responseJson.data[0]) {",
									"    pm.environment.set('total_students', responseJson.data[0].total_students);",
									"    pm.environment.set('total_colleges', responseJson.data[0].total_colleges);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/admin/stats",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"stats"
							]
						},
						"description": "Get comprehensive dashboard statistics including:\n- Total students, colleges, departments, admins\n- Total and recent recognition events\n- Perfect for dashboard overview cards"
					},
					"response": [
						{
							"name": "Success Response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/admin/stats",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"admin",
										"stats"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Admin statistics retrieved successfully\",\n    \"status_code\": 200,\n    \"count\": 1,\n    \"data\": [\n        {\n            \"total_students\": 150,\n            \"total_colleges\": 5,\n            \"total_departments\": 25,\n            \"total_admins\": 3,\n            \"total_recognitions\": 1250,\n            \"recent_recognitions\": 45\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Registration Trends",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has trends data\", function () {",
									"    const responseJson = pm.response.json();",
									"    const data = responseJson.data[0];",
									"    ",
									"    pm.expect(data).to.have.property('daily_registrations');",
									"    pm.expect(data).to.have.property('total_period');",
									"    pm.expect(data).to.have.property('period_start');",
									"    pm.expect(data).to.have.property('period_end');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/admin/analytics/registration-trends?days=30",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"analytics",
								"registration-trends"
							],
							"query": [
								{
									"key": "days",
									"value": "30",
									"description": "Number of days to analyze (default: 30)"
								}
							]
						},
						"description": "Get student registration trends over time.\nReturns daily registration counts for chart visualization.\n\nQuery Parameters:\n- days: Number of days to analyze (default: 30)\n\nPerfect for line/bar charts showing registration patterns."
					},
					"response": [
						{
							"name": "30 Days Trends",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/admin/analytics/registration-trends?days=30",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"admin",
										"analytics",
										"registration-trends"
									],
									"query": [
										{
											"key": "days",
											"value": "30"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"message\": \"Registration trends retrieved successfully\",\n    \"status_code\": 200,\n    \"count\": 1,\n    \"data\": [\n        {\n            \"daily_registrations\": [\n                {\"date\": \"2025-07-04\", \"count\": 5},\n                {\"date\": \"2025-07-05\", \"count\": 8},\n                {\"date\": \"2025-07-06\", \"count\": 3}\n            ],\n            \"total_period\": 45,\n            \"period_start\": \"2025-07-04\",\n            \"period_end\": \"2025-08-03\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get College Distribution",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has distribution data\", function () {",
									"    const responseJson = pm.response.json();",
									"    const data = responseJson.data[0];",
									"    ",
									"    pm.expect(data).to.have.property('college_distribution');",
									"    pm.expect(data).to.have.property('total_students');",
									"    pm.expect(data.college_distribution).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/admin/analytics/college-distribution",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"analytics",
								"college-distribution"
							]
						},
						"description": "Get student distribution across colleges.\nReturns student counts per college for pie chart visualization.\n\nPerfect for:\n- Pie charts showing college distribution\n- Understanding which colleges have more students\n- College enrollment analysis"
					},
					"response": [
						{
							"name": "College Distribution",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/admin/analytics/college-distribution",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"admin",
										"analytics",
										"college-distribution"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"message\": \"College distribution retrieved successfully\",\n    \"status_code\": 200,\n    \"count\": 1,\n    \"data\": [\n        {\n            \"college_distribution\": [\n                {\n                    \"college_id\": \"uuid-1\",\n                    \"college_name\": \"College of Engineering\",\n                    \"student_count\": 75,\n                    \"percentage\": 50.0\n                },\n                {\n                    \"college_id\": \"uuid-2\",\n                    \"college_name\": \"College of Science\",\n                    \"student_count\": 45,\n                    \"percentage\": 30.0\n                },\n                {\n                    \"college_id\": \"uuid-3\",\n                    \"college_name\": \"College of Business\",\n                    \"student_count\": 30,\n                    \"percentage\": 20.0\n                }\n            ],\n            \"total_students\": 150\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Department Enrollment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has enrollment data\", function () {",
									"    const responseJson = pm.response.json();",
									"    const data = responseJson.data[0];",
									"    ",
									"    pm.expect(data).to.have.property('department_enrollment');",
									"    pm.expect(data).to.have.property('total_students');",
									"    pm.expect(data.department_enrollment).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/admin/analytics/department-enrollment?limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"analytics",
								"department-enrollment"
							],
							"query": [
								{
									"key": "limit",
									"value": "10",
									"description": "Limit number of departments returned (default: 20)"
								}
							]
						},
						"description": "Get student enrollment by department.\nReturns student counts per department for bar chart visualization.\n\nQuery Parameters:\n- limit: Maximum number of departments to return (default: 20)\n\nPerfect for:\n- Bar charts showing department enrollment\n- Identifying popular departments\n- Department capacity planning"
					},
					"response": [
						{
							"name": "Department Enrollment",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/admin/analytics/department-enrollment?limit=10",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"admin",
										"analytics",
										"department-enrollment"
									],
									"query": [
										{
											"key": "limit",
											"value": "10"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"message\": \"Department enrollment retrieved successfully\",\n    \"status_code\": 200,\n    \"count\": 1,\n    \"data\": [\n        {\n            \"department_enrollment\": [\n                {\n                    \"department_id\": \"uuid-1\",\n                    \"department_name\": \"Computer Science\",\n                    \"college_name\": \"College of Engineering\",\n                    \"student_count\": 35,\n                    \"department_head\": \"Dr. John Smith\"\n                },\n                {\n                    \"department_id\": \"uuid-2\",\n                    \"department_name\": \"Electrical Engineering\",\n                    \"college_name\": \"College of Engineering\",\n                    \"student_count\": 28,\n                    \"department_head\": \"Prof. Sarah Johnson\"\n                }\n            ],\n            \"total_students\": 150,\n            \"total_departments\": 25\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get System Health Metrics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has health metrics\", function () {",
									"    const responseJson = pm.response.json();",
									"    const data = responseJson.data[0];",
									"    ",
									"    pm.expect(data).to.have.property('registration_rate');",
									"    pm.expect(data).to.have.property('recognition_success_rate');",
									"    pm.expect(data).to.have.property('system_health');",
									"    pm.expect(data).to.have.property('activity_metrics');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/admin/analytics/system-health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"analytics",
								"system-health"
							]
						},
						"description": "Get comprehensive system health and performance metrics.\n\nIncludes:\n- Registration rate (students per day)\n- Recognition success rate\n- System health score\n- Activity metrics\n- Performance indicators\n\nPerfect for monitoring system performance and identifying issues."
					},
					"response": [
						{
							"name": "System Health",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/admin/analytics/system-health",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"admin",
										"analytics",
										"system-health"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"message\": \"System health metrics retrieved successfully\",\n    \"status_code\": 200,\n    \"count\": 1,\n    \"data\": [\n        {\n            \"registration_rate\": 5.2,\n            \"recognition_success_rate\": 94.5,\n            \"system_health\": \"excellent\",\n            \"activity_metrics\": {\n                \"daily_registrations\": 5.2,\n                \"daily_recognitions\": 18.3,\n                \"peak_usage_hour\": \"10:00-11:00\",\n                \"avg_response_time\": \"0.8s\"\n            },\n            \"health_indicators\": {\n                \"database_status\": \"healthy\",\n                \"api_status\": \"healthy\",\n                \"recognition_service\": \"healthy\"\n            }\n        }\n    ]\n}"
						}
					]
				}
			],
			"description": "Dashboard analytics endpoints for comprehensive system insights"
		},
		{
			"name": "👤 Admin Management",
			"item": [
				{
					"name": "Get Admin Users Count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has admin count\", function () {",
									"    const responseJson = pm.response.json();",
									"    const data = responseJson.data[0];",
									"    ",
									"    pm.expect(data).to.have.property('total_admins');",
									"    pm.expect(data.total_admins).to.be.a('number');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/admin/users/count",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"users",
								"count"
							]
						},
						"description": "Get total count of admin users in the system.\nUseful for dashboard statistics and user management."
					},
					"response": [
						{
							"name": "Admin Count",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{admin_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/admin/users/count",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"admin",
										"users",
										"count"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [],
							"cookie": [],
							"body": "{\n    \"message\": \"Admin count retrieved successfully\",\n    \"status_code\": 200,\n    \"count\": 1,\n    \"data\": [\n        {\n            \"total_admins\": 3\n        }\n    ]\n}"
						}
					]
				}
			],
			"description": "Admin user management endpoints"
		},
		{
			"name": "🧪 Test All Analytics",
			"item": [
				{
					"name": "Run All Analytics Tests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// This will run all analytics endpoints in sequence",
									"console.log(\"Starting comprehensive analytics test...\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test to verify the collection is working",
									"pm.test(\"Collection is properly configured\", function () {",
									"    pm.expect(pm.info.requestName).to.include(\"Run All Analytics Tests\");",
									"});",
									"",
									"// Guide for running all tests",
									"console.log(\"✅ To test all analytics endpoints:\");",
									"console.log(\"1. Set up environment variables:\");",
									"console.log(\"   - base_url: http://localhost:8000\");",
									"console.log(\"   - admin_token: your-jwt-token\");",
									"console.log(\"2. Run the collection using Collection Runner\");",
									"console.log(\"3. All endpoints will be tested automatically\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								""
							]
						},
						"description": "This is a placeholder request for testing the entire collection.\n\nTo test all analytics endpoints:\n1. Use Postman Collection Runner\n2. Select this collection\n3. Set environment variables\n4. Run all requests"
					}
				}
			],
			"description": "Test utilities for the analytics collection"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "global-prerequest",
				"exec": [
					"// Global pre-request script",
					"console.log(\"🚀 KNUST Student System Analytics API\");",
					"console.log(\"📊 Testing dashboard endpoints...\");",
					"",
					"// Check if admin token is set",
					"if (!pm.environment.get('admin_token')) {",
					"    console.warn(\"⚠️  Admin token not set. Please get token from /auth/login-otp endpoint\");",
					"}"
				],
				"type": "text/javascript"
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "global-test",
				"exec": [
					"// Global test script",
					"pm.test(\"Response time is acceptable\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"pm.test(\"Response has proper structure\", function () {",
					"    if (pm.response.code === 200) {",
					"        const responseJson = pm.response.json();",
					"        pm.expect(responseJson).to.have.property('message');",
					"        pm.expect(responseJson).to.have.property('status_code');",
					"        pm.expect(responseJson).to.have.property('count');",
					"        pm.expect(responseJson).to.have.property('data');",
					"    }",
					"});",
					"",
					"// Log response for debugging",
					"if (pm.response.code !== 200) {",
					"    console.log(\"❌ Request failed:\", pm.response.status);",
					"    console.log(\"Response:\", pm.response.text());",
					"}"
				],
				"type": "text/javascript"
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string",
			"description": "Base URL for the KNUST Student System API"
		},
		{
			"key": "admin_token",
			"value": "",
			"type": "string",
			"description": "JWT Bearer token for admin authentication. Get from /auth/login-otp -> /auth/verify-login-otp"
		}
	]
}
